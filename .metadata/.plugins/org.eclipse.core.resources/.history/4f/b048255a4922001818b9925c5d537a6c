import java.util.ArrayList;

// LEAVE THIS FILE IN THE DEFAULT PACKAGE
//  (i.e., DO NOT add 'package cs311.pa1;' or similar)

// DO NOT MODIFY THE EXISTING METHOD SIGNATURES
//  (you may, however, add member fields and additional methods)

// DO NOT INCLUDE LIBRARIES OUTSIDE OF THE JAVA STANDARD LIBRARY
//  (i.e., you may include java.util.ArrayList etc. here, but not junit, apache commons, google guava, etc.)

/**
* @author Tyler McAnally, Jeff Olson, Kevin Mathes
*/

public class BruteForceSimilarity
{
	private ArrayList<String> S = new ArrayList<String>();
	private ArrayList<String> T = new ArrayList<String>();

	/*
	 * BruteForceSimilarity(String s1, String s2, int sLength). sLength is the shingle length
	 * that should be used to compute the similarity between strings s1 and s2. You may assume 
	 * that the strings are pre-processed. I.e, all punctuation symbols, white spaces are 
	 * removed and all letters are in lowercase.
	 */
	public BruteForceSimilarity(String s1, String s2, int sLength)
	{
		S = Helpers.getShingles(s1, sLength);
		T = Helpers.getShingles(s2, sLength);
	}

	/*
	 * lengthOfS1() This method returns the V ectorLength of S. Type of this method must be float.
	 */
	public float lengthOfS1()
	{
		return Helpers.getVectorLength(S);
	}

	/*
	 * lengthOfS2() This method returns the V ectorLength of T. Type of this method must be float.
	 */
	public float lengthOfS2()
	{
		return Helpers.getVectorLength(T);
	}

	/*
	 * similarity() This method returns Similarity(S, T). 
	 * Type of this method must be float.
	 * returns -1 if lengthOfS1 * lengthOfS1 = 0 
	 * 		(prevents division by 0 exception)
	 */
	public float similarity()
	{
		return getSimilarity(S, T, lengthOfS1(), lengthOfS2());
	}
	
	public static float getSimilarity(ArrayList<String> s, ArrayList<String> t, 
										float sLength, float tLength) {
		ArrayList<String> union = Helpers.union(s, t);
		ArrayList<String> checked1 = new ArrayList<String>();
		ArrayList<String> checked2 = new ArrayList<String>();
		float similarity;
		int sum = 0;
		int f1 = 0, f2 = 0;
		for (int i = 0; i < union.size(); i++) {
			f1 = Helpers.function(s, checked1, union.get(i));
			f2 = Helpers.function(t, checked2, union.get(i));
			sum += f1 * f2;
		}
		if (sLength * tLength == 0) similarity = -1;
		else similarity = sum / (sLength * tLength);
		return similarity;
	}
	
	
	
	
	
	
	
	
	
}